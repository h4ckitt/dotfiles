# Clean Debian packages
apt-clean() {
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove
}

# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$@"
}

# Print README file
readme() {
    for readme in {readme,README}.{md,MD,markdown,mkd,txt,TXT}; do
        if [[ -x "$(command -v glow)" ]] && [[ -f "$readme" ]]; then
            mdv "$readme"
        elif [[ -f "$readme" ]]; then
            cat "$readme"
        fi
    done
}

# Weather
weather() {
    curl -s "https://wttr.in/${1:-Ponorogo}?m2F&format=v2"
}

# Git commit browser
fshow() {
    local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
    git log --color=always \
        --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
    fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
        --header="enter to view, alt-y to copy hash" --preview="$view_commit" \
        --bind="enter:execute:$view_commit | less -R" \
        --bind="alt-y:execute:$commit_hash | xclip -selection clipboard"
}

# Remove all commit in Git
git-remove-all-commit() {
    local branch
    branch=$(git symbolic-ref --short HEAD)
    echo -e "\nDo you want to remove all your commit in \033[1m$branch\033[0m branch? [Y/n] "
    read -r response
    case "$response" in
        [yY][eE][sS]|[yY])
            git checkout --orphan latest_branch
            git add -A
            git commit -am "Initial commit"
            git branch -D "$branch"
            git branch -m "$branch"
            echo -e "\nTo force update your repository, run this command:\n\n    git push -fu origin $branch"
            ;;
        *)
            echo "Cancelled."
            ;;
    esac
}

# Start PHP server
phpserver() {
    local ip=localhost
    local port="${1:-4000}"
    php -S "${ip}:${port}"
}

# Add Custom Path		
add_path(){
	pat="$1"
	current_shell=$SHELL
	case $current_shell in
		*"/bin/zsh") file=~/.zshrc ;;
		*"/bin/bash") file=~/.bashhrc;;
		*) echo "No Compatible Shell Found\nExiting";return;;
	esac
	[ ! -z $pat ] || {
		echo "Usage: $0 <dir to add>"
		return
	}
	line="$(grep -n "export PATH" $file | sed 's@:.*@@')"
	[ ! -z $line ] || {
		echo "export PATH=$pat:$""PATH" >> $file
		return
	}
	prev="$(grep "export PATH" $file| sed -f ~/.pattern.sed| tr -d '\"')"
	new_line="export PATH=$prev$pat:$""PATH"
	sed -i ''$line's@.*@'$new_line'@' $file
}

# Turn On Or Off Private VPN
vpn(){
	[ -f ~/.vpn_status ] || echo 0 > ~/.vpn_status
	vpn_status=$(cat ~/.vpn_status)
	[ -z $1 ] || {
		case $1 in
			"-s") if [ $vpn_status -eq 0 ]; then
					echo "VPN Is Off"
					return
				fi
				echo "VPN Is On"
				return
				;;
		esac
	}
	if [ $vpn_status -eq 0 ]; then
		sudo systemctl start wg-quick@Raid
		echo 1 > ~/.vpn_status
		return
	fi
	sudo systemctl stop wg-quick@Raid
	echo 0 > ~/.vpn_status
}

# Compile And Run CS Code
csrun(){
	[ ! -z $1 ] || {
		echo "Usage: $0 <file.cs>"
		return 1
	}

	csc $1
	filename=${1%.*}
	[ -f $filename.exe ] || return
	mono $filename.exe
	rm -rf $filename.exe
}

#I'm Not Telling
phdl(){
	
	[ ! -z $1 ] || {
		echo "$(date +%H:%M)"
		return
	}
	~/Documents/Proj/PHDL/phdl $1
}

#Create A New Project And Automatically Initialize It In Git
newproj(){
	projname="$@"
	[ ! -z "$projname" ] || {
		echo -ne "Project Name: "
		read projname
	}
	mkd "$projname"
	echo -ne "Initialize Git Repo? [Y/n]: "
	read option
	opt=$(tr '[[:upper:]]' '[[:lower:]]' <<< $option)
	[ "$opt" = "n" ] || {
		git init
	}
}

# Mouse Jiggler For When I'm Working With An Acitivity Monitor
idlemonitor() {
#requires:
# 'xprintidle' for inactivity check (in ms)
# 'rand' for generating random number (screen resolution)
# 'xdotool' to move the mouse pointer

#parameters:
# 100000 idle time in ms before executing the mousemove
# 800 / 600: your screen resolution, at at least the moving range for the mouse pointer

idletime=$1

if [ -z "$idletime" ]; then 
	idletime=10000
fi

while :; do
    if  [ $(xprintidle) -gt $idletime ]
    then
        xdotool mousemove `rand -M 1920` `rand -M 1080`;
    fi

    sleep 30
done
}
